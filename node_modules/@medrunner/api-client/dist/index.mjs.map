{"version":3,"sources":["../src/api/endpoints/ApiEndpoint.ts","../src/api/endpoints/auth/AuthEndpoint.ts","../src/api/endpoints/auth/TokenManager.ts","../src/api/endpoints/chatMessage/ChatMessageEndpoint.ts","../src/api/endpoints/client/ClientEndpoint.ts","../src/api/endpoints/code/CodeEndpoint.ts","../src/api/endpoints/emergency/EmergencyEndpoint.ts","../src/api/endpoints/orgSettings/OrgSettingsEndpoint.ts","../src/api/endpoints/staff/StaffEndpoint.ts","../src/api/endpoints/websocket/WebsocketManager.ts","../src/api/endpoints/websocket/WebsocketEndpoint.ts","../src/api/MedrunnerApiClient.ts","../src/api/endpoints/emergency/response/LocationDetail.ts","../src/models/CancellationReason.ts","../src/models/Class.ts","../src/models/Emergency.ts","../src/models/MissionStatus.ts","../src/models/Person.ts","../src/models/Level.ts","../src/models/ResponseRating.ts","../src/models/ThreatLevel.ts","../src/models/PublicOrgSettings.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig } from \"axios\";\nimport { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../Func\";\nimport ApiResponse from \"../ApiResponse\";\nimport TokenManager from \"./auth/TokenManager\";\n\nexport default abstract class ApiEndpoint {\n  public readonly baseUrl: string;\n\n  protected constructor(\n    baseUrl: string | undefined,\n    public readonly tokenManager: TokenManager,\n    protected readonly log?: Logger,\n    private readonly headerProvider?: HeaderProvider,\n  ) {\n    this.baseUrl = baseUrl ?? \"https://api.medrunner.space\";\n  }\n\n  protected abstract endpoint(): string;\n\n  protected endpointUrl(): string {\n    return `${this.baseUrl}/${this.endpoint()}`;\n  }\n\n  private async headersForRequest(noAuthentication: boolean): Promise<AxiosRequestConfig> {\n    const config: AxiosRequestConfig = {\n      baseURL: this.baseUrl,\n      headers: {},\n    };\n\n    if (config.headers !== undefined) {\n      if (!noAuthentication) {\n        const accessToken = await this.tokenManager.getAccessToken(\"API makeRequest\");\n        if (accessToken !== undefined) {\n          // only include auth header if we have a token\n          config.headers.Authorization = `Bearer ${accessToken}`;\n        }\n      }\n\n      if (this.headerProvider !== undefined) {\n        for (const header of Object.entries(await this.headerProvider())) {\n          config.headers[header[0]] = header[1];\n        }\n      }\n    }\n\n    return config;\n  }\n\n  protected async getRequest<T = unknown>(\n    endpoint: string,\n    queryParams?: { [key: string]: unknown },\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse<T>> {\n    return await this.makeRequestWithoutBody<T>(endpoint, \"GET\", axios.get, queryParams, noAuthentication);\n  }\n\n  protected async postRequest<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse<T>> {\n    return await this.makeRequestWithBody<T>(endpoint, \"POST\", axios.post, data, noAuthentication);\n  }\n\n  protected async putRequest<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse<T>> {\n    return await this.makeRequestWithBody<T>(endpoint, \"PUT\", axios.put, data, noAuthentication);\n  }\n\n  protected async patchRequest<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse<T>> {\n    return await this.makeRequestWithBody<T>(endpoint, \"PATCH\", axios.patch, data, noAuthentication);\n  }\n\n  protected async deleteRequest(\n    endpoint: string,\n    queryParams?: { [key: string]: unknown },\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse> {\n    return await this.makeRequestWithoutBody(endpoint, \"DELETE\", axios.delete, queryParams, noAuthentication);\n  }\n\n  private async makeRequestWithBody<T = unknown>(\n    endpoint: string,\n    requestType: \"POST\" | \"PUT\" | \"PATCH\",\n    axiosRequest: AxiosRequestWithBody<T>,\n    data?: unknown,\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse<T>> {\n    const wrappedRequest: AxiosWrapper<T> = async (requestUrl, config) => await axiosRequest(requestUrl, data, config);\n    return await this.makeRequest<T>(endpoint, requestType, wrappedRequest, undefined, noAuthentication);\n  }\n\n  private async makeRequestWithoutBody<T = unknown>(\n    endpoint: string,\n    requestType: \"GET\" | \"DELETE\",\n    axiosRequest: AxiosRequestWithoutBody<T>,\n    queryParams?: { [key: string]: unknown },\n    noAuthentication?: boolean,\n  ): Promise<ApiResponse<T>> {\n    const wrappedRequest: AxiosWrapper<T> = async (requestUrl, config) => await axiosRequest(requestUrl, config);\n    return await this.makeRequest<T>(endpoint, requestType, wrappedRequest, queryParams, noAuthentication);\n  }\n\n  private buildUrl(endpoint: string): string {\n    const baseUrl = this.endpointUrl();\n\n    if (baseUrl.endsWith(\"/\")) {\n      if (endpoint.startsWith(\"/\")) {\n        return `${baseUrl}${endpoint.substring(1)}`;\n      }\n\n      return `${baseUrl}${endpoint}`;\n    }\n\n    if (endpoint.startsWith(\"/\")) {\n      return `${baseUrl}${endpoint}`;\n    }\n\n    return `${baseUrl}/${endpoint}`;\n  }\n\n  private async makeRequest<T = unknown>(\n    endpoint: string,\n    requestType: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n    request: AxiosWrapper<T>,\n    queryParams?: { [key: string]: unknown },\n    noAuthentication = false,\n  ): Promise<ApiResponse<T>> {\n    const requestUrl = this.buildUrl(endpoint);\n\n    this.log?.debug(`sending ${requestType} request to ${requestUrl}`);\n    try {\n      const config = await this.headersForRequest(noAuthentication);\n      if (queryParams !== undefined) {\n        config.params = queryParams;\n      }\n\n      const result = await request(requestUrl, config);\n\n      return {\n        success: true,\n        data: result.data,\n      };\n    } catch (e) {\n      this.log?.warn(`Error for ${requestType} request to ${requestUrl}: ${e}`);\n      return {\n        success: false,\n        errorMessage: e instanceof AxiosError ? e.response?.data : undefined,\n        statusCode: e instanceof AxiosError ? e.response?.status : undefined,\n      };\n    }\n  }\n}\n\ntype AxiosWrapper<T = unknown> = (url: string, config: AxiosRequestConfig) => Promise<ApiResponse<T>>;\n\ntype AxiosRequestWithBody<T = unknown> = (\n  url: string,\n  data: unknown,\n  config: AxiosRequestConfig,\n) => Promise<ApiResponse<T>>;\ntype AxiosRequestWithoutBody<T = unknown> = (url: string, config: AxiosRequestConfig) => Promise<ApiResponse<T>>;\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport ApiToken from \"../../../models/ApiToken\";\nimport ApiResponse from \"../../ApiResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\nimport CreateApiTokenRequest from \"./request/CreateApiTokenRequest\";\nimport SignOutRequest from \"./request/SignOutRequest\";\n\n/**\n * Endpoints for interacting with auth.\n * */\nexport default class AuthEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"auth\";\n  }\n\n  /**\n   * Invalidate a refresh token.\n   *\n   * @param oldToken - Token to be invalidated\n   *\n   * @virtual\n   * */\n  public async signOut(oldToken: SignOutRequest): Promise<ApiResponse> {\n    return await this.postRequest<string>(\"/signOut\", oldToken);\n  }\n\n  /**\n   * Gets all api tokens for the user.\n   *\n   * */\n  public async getApiTokens(): Promise<ApiResponse<ApiToken[]>> {\n    return await this.getRequest<ApiToken[]>(`/apiTokens`);\n  }\n\n  /**\n   * Creates an api token.\n   *\n   * @param newToken - Emergency details for the new emergency\n   * @returns The newly-created api token\n   *\n   * @virtual\n   * */\n  public async createApiToken(newToken: CreateApiTokenRequest): Promise<ApiResponse<string>> {\n    return await this.postRequest<string>(\"/apiTokens\", {\n      name: newToken.name,\n      expirationDate: newToken.expirationDate?.toISOString(),\n    });\n  }\n\n  /**\n   * Delete an api token.\n   *\n   * @param id - The id of the api token to delete\n   *\n   * */\n  public async deleteApiToken(id: string): Promise<ApiResponse> {\n    return await this.deleteRequest(`/apiTokens/${id}`);\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { AsyncAction, HeaderProvider } from \"../../../Func\";\nimport TokenGrant from \"../../../models/TokenGrant\";\nimport ApiConfig from \"../../ApiConfig\";\nimport ApiEndpoint from \"../ApiEndpoint\";\n\nexport default class TokenManager extends ApiEndpoint {\n  private accessToken?: string;\n  private refreshToken?: string;\n  private accessTokenExpiration?: string;\n  private refreshTokenExpiration?: string;\n  private tokenFetchPromise?: Promise<TokenGrant>;\n\n  public constructor(\n    config: ApiConfig,\n    private readonly refreshCallback?: AsyncAction<TokenGrant>,\n    log?: Logger,\n    headerProvider?: HeaderProvider,\n  ) {\n    // todo: I dunno fix this someday I guess?\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    super(config.baseUrl, null!, log, headerProvider);\n    this.accessToken = config.accessToken;\n    this.refreshToken = config.refreshToken;\n  }\n\n  protected override endpoint(): string {\n    return \"auth\";\n  }\n\n  public async getAccessToken(source: string = \"unknown\"): Promise<string | undefined> {\n    this.log?.debug(`getAccessToken: New token requested from ${source}`);\n    if (this.accessToken !== undefined && this.accessTokenExpiration !== undefined) {\n      const exp = Math.trunc(new Date(this.accessTokenExpiration).getTime() / 1000);\n      const now = Math.trunc(Date.now() / 1000);\n\n      // check expiration minus 5 minutes to guard against race condition or timing issues creating unnecessary 403s\n      if (exp - 300 > now) {\n        this.log?.debug(`getAccessToken: ${source} => Token valid and simply returned`);\n        return this.accessToken;\n      }\n    }\n\n    // if the refresh token isn't present, nothing we can do\n    if (this.refreshToken === undefined) {\n      this.log?.debug(`getAccessToken: ${source} => Missing refresh token, returning stored access token`);\n      return this.accessToken;\n    }\n\n    // token is expired (or will expire soon) and there is not already one fetching, so fetch a new one\n    if (!this.tokenFetchPromise) {\n      this.log?.debug(`getAccessToken: ${source} => No current token fetch, starting new fetch`);\n      this.tokenFetchPromise = this.fetchToken(this.refreshToken, source);\n    }\n\n    try {\n      this.log?.debug(`getAccessToken: ${source} => Waiting for token fetch to complete`);\n      const tokens = await this.tokenFetchPromise;\n\n      this.log?.debug(`getAccessToken: ${source} => Setting new tokens in memory`);\n      this.accessToken = tokens.accessToken;\n      this.refreshToken = tokens.refreshToken;\n      this.accessTokenExpiration = tokens.accessTokenExpiration;\n      if (tokens.refreshTokenExpiration) this.refreshTokenExpiration = tokens.refreshTokenExpiration;\n\n      if (this.refreshCallback !== undefined) {\n        this.log?.debug(`getAccessToken: ${source} => Calling refresh callback with new tokens`);\n        await this.refreshCallback(tokens);\n      }\n    } finally {\n      this.tokenFetchPromise = undefined;\n    }\n\n    this.log?.debug(`getAccessToken: ${source} => Returning new access token`);\n    return this.accessToken;\n  }\n\n  private async fetchToken(refreshToken: string, source: string = \"unknown\"): Promise<TokenGrant> {\n    this.log?.debug(`getAccessToken: ${source} => Fetching new tokens`);\n    const result = await this.postRequest<TokenGrant>(\"/exchange\", { refreshToken: refreshToken }, true);\n\n    if (!result.success || result.data === undefined) {\n      throw Error(result.statusCode?.toString());\n    }\n\n    this.log?.debug(`getAccessToken: ${source} => Successfully fetched new tokens`);\n    return result.data;\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport ChatMessage from \"../../../models/ChatMessage\";\nimport ApiResponse from \"../../ApiResponse\";\nimport PaginatedResponse from \"../../PaginatedResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\nimport ChatMessageRequest from \"./request/ChatMessageRequest\";\n\n/**\n * Endpoints for interacting with chat messages.\n * */\nexport default class ChatMessageEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"chatMessage\";\n  }\n\n  /**\n   * Gets the specified amount of chat messages for a given emergency.\n   *\n   * @param emergencyId - The emergency for which to fetch the chat history\n   * @param limit - The number of emergencies to get\n   * @param paginationToken - The number to use for pagination\n   * */\n  public async getHistory(\n    emergencyId: string,\n    limit: number,\n    paginationToken?: string,\n  ): Promise<ApiResponse<PaginatedResponse<ChatMessage>>> {\n    return await this.getRequest<PaginatedResponse<ChatMessage>>(`/${emergencyId}`, { limit, paginationToken });\n  }\n\n  /**\n   * Sends a new chat message\n   *\n   * @param message - The message to send\n   * @returns The newly-created chat message\n   *\n   * */\n  public async sendMessage(message: ChatMessageRequest): Promise<ApiResponse<ChatMessage>> {\n    return await this.postRequest<ChatMessage>(\"\", message);\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport ClientHistory from \"../../../models/ClientHistory\";\nimport Person, { BlockedStatus } from \"../../../models/Person\";\nimport ApiResponse from \"../../ApiResponse\";\nimport PaginatedResponse from \"../../PaginatedResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\n\n/**\n * Endpoints for interacting with clients.\n * */\nexport default class ClientEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"client\";\n  }\n\n  /**\n   * Gets the current client.\n   * */\n  public async get(): Promise<ApiResponse<Person>> {\n    return await this.getRequest<Person>(\"\");\n  }\n\n  /**\n   * Gets the specified amount of emergencies the client has created.\n   * @param limit - The number of emergencies to get\n   * @param paginationToken - The number to use for pagination\n   * */\n  public async getHistory(\n    limit: number,\n    paginationToken?: string,\n  ): Promise<ApiResponse<PaginatedResponse<ClientHistory>>> {\n    return await this.getRequest<PaginatedResponse<ClientHistory>>(\"/history\", { limit, paginationToken });\n  }\n\n  /**\n   * Gets the blocklist status of the current client.\n   * */\n  public async getBlockedStatus(): Promise<ApiResponse<BlockedStatus>> {\n    return await this.getRequest<BlockedStatus>(\"/blocked\");\n  }\n\n  /**\n   * Links the current user to a rsiHandle.\n   *\n   * @param rsiHandle - The RSI handle of the client\n   *\n   * */\n  public async linkClient(rsiHandle: string): Promise<ApiResponse> {\n    return await this.postRequest(\"/link\", { rsiHandle });\n  }\n\n  /**\n   * Updates the settings of the current user for the Client Portal.\n   *\n   * @deprecated Use {@link setUserSettings} instead\n   * @param settings - The stringfied new object settings that will replace the old one\n   * @returns The updated settings object\n   *\n   * */\n  public async setSettings(settings: Record<string, unknown>): Promise<ApiResponse<Record<string, unknown>>> {\n    return await this.patchRequest<Record<string, unknown>>(\"/settings/clientPortal\", settings);\n  }\n\n  /**\n   * Updates the settings of the current user for the Client Portal.\n   *\n   * @param settings - The object settings to add or update\n   *\n   * */\n  public async setUserSettings(settings: string): Promise<ApiResponse> {\n    return await this.putRequest(\"/settings/clientPortal\", { settingsBlob: settings });\n  }\n\n  /**\n   * Deactivate the current client.\n   * */\n  public async deactivate(): Promise<ApiResponse> {\n    return await this.deleteRequest(\"\");\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport ApiResponse from \"../../ApiResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\n\n/**\n * Endpoints for interacting with promotional codes.\n * */\nexport default class CodeEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"code\";\n  }\n\n  /**\n   * Redeems the specified promotional code for the current user\n   *\n   * @param code - The code to redeem.\n   * */\n  public async redeem(code: string): Promise<ApiResponse> {\n    return await this.postRequest(`/redeem/${code}`);\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport { CancellationReason } from \"../../../models/CancellationReason\";\nimport Emergency from \"../../../models/Emergency\";\nimport { ResponseRating } from \"../../../models/ResponseRating\";\nimport ApiResponse from \"../../ApiResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\nimport CreateEmergencyRequest from \"./request/CreateEmergencyRequest\";\nimport LocationDetail from \"./response/LocationDetail\";\nimport TeamDetailsResponse from \"./response/TeamDetailsResponse\";\n\n/**\n * Endpoints for interacting with emergencies.\n * */\nexport default class EmergencyEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"emergency\";\n  }\n\n  /**\n   * Gets an emergency by id.\n   *\n   * @param id - The id of the emergency to retrieve\n   * */\n  public async getEmergency(id: string): Promise<ApiResponse<Emergency>> {\n    return await this.getRequest<Emergency>(`/${id}`);\n  }\n\n  /**\n   * Bulk fetches emergencies by id.\n   *\n   * @param ids - a list of emergencies to retrieve\n   * */\n  public async getEmergencies(ids: string[]): Promise<ApiResponse<Emergency[]>> {\n    return await this.getRequest<Emergency[]>(`/bulk?id=${ids.join(\"&id=\")}`);\n  }\n\n  /**\n   * Creates a new emergency.\n   *\n   * @param newEmergency - Emergency details for the new emergency\n   * @returns The newly-created emergency\n   *\n   * @virtual\n   * */\n  public async createEmergency(newEmergency: CreateEmergencyRequest): Promise<ApiResponse<Emergency>> {\n    return await this.postRequest<Emergency>(\"\", newEmergency);\n  }\n\n  /**\n   * Cancels an existing emergency.\n   *\n   * @remarks\n   * Emergency must still be in the {@link MissionStatus.RECEIVED} state in order to be canceled.\n   *\n   * @param id - The id of the emergency to cancel\n   * @param reason - The reason the emergency was canceled\n   * */\n  public async cancelEmergencyWithReason(id: string, reason: CancellationReason): Promise<ApiResponse> {\n    return await this.postRequest(`/${id}/cancelWithReason`, {\n      reason: reason,\n    });\n  }\n\n  /**\n   * Allows the client to rate their emergency.\n   *\n   * @param id - The id of the emergency to rate\n   * @param rating - The rating to give the services provided\n   * @param remarks - Additional remarks provided by the client\n   *\n   * @internal\n   * */\n  public async rateServices(id: string, rating: ResponseRating, remarks?: string): Promise<ApiResponse> {\n    return await this.postRequest(`/${id}/rate/`, {\n      rating: rating,\n      remarks: remarks,\n    });\n  }\n\n  /**\n   * Fetches additional details about the responding team for an alert.\n   *\n   * @param id - The id of the emergency to get team details about\n   * */\n  public async teamDetails(id: string): Promise<ApiResponse<TeamDetailsResponse>> {\n    return await this.getRequest<TeamDetailsResponse>(`/${id}/teamDetails`);\n  }\n\n  /**\n   * Gets a tree of valid locations from which an emergency may be submitted.\n   * */\n  public async emergencyLocations(): Promise<ApiResponse<LocationDetail[]>> {\n    return await this.getRequest<LocationDetail[]>(\"/meta/locations\");\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport PublicOrgSettings from \"../../../models/PublicOrgSettings\";\nimport ApiResponse from \"../../ApiResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\n\n/**\n * Endpoints for interacting with the public org settings.\n * */\nexport default class OrgSettingsEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"orgsettings\";\n  }\n\n  /**\n   * Get the public org settings.\n   *\n   * */\n  public async getPublicSettings(): Promise<ApiResponse<PublicOrgSettings>> {\n    return await this.getRequest<PublicOrgSettings>(`/public`);\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport ApiResponse from \"../../ApiResponse\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\nimport MedalInformation from \"./response/MedalInformation\";\n\n/**\n * Endpoints for interacting with staff.\n * */\nexport default class StaffEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  protected override endpoint(): string {\n    return \"staff\";\n  }\n\n  /**\n   * Gets detailed information about medals.\n   * */\n  public async medalsInformation(): Promise<ApiResponse<MedalInformation[]>> {\n    return await this.getRequest<MedalInformation[]>(\"/meta/medals\");\n  }\n}\n","import { type HubConnection, HubConnectionBuilder, ILogger, LogLevel } from \"@microsoft/signalr\";\nimport { Logger } from \"ts-log\";\n\nimport TokenManager from \"../auth/TokenManager\";\n\nclass WSLogger implements ILogger {\n  constructor(private logger?: Logger) {}\n\n  log(logLevel: LogLevel, message: string): void {\n    switch (logLevel) {\n      case LogLevel.Trace:\n        this.logger?.trace(`Websocket: ${message}`);\n        break;\n      case LogLevel.Information:\n        this.logger?.info(`Websocket: ${message}`);\n        break;\n      case LogLevel.Warning:\n        this.logger?.warn(`Websocket: ${message}`);\n        break;\n      case LogLevel.Error || LogLevel.Critical:\n        this.logger?.error(`Websocket: ${message}`);\n        break;\n      case LogLevel.Debug:\n        this.logger?.debug(`Websocket: ${message}`);\n        break;\n    }\n  }\n}\n\nexport default class WebsocketManager {\n  private tokenManager: TokenManager;\n  protected readonly logger?: Logger;\n\n  public constructor(\n    private readonly baseUrl: string,\n    tokenManager: TokenManager,\n    logger?: Logger,\n  ) {\n    this.tokenManager = tokenManager;\n    this.logger = logger;\n  }\n\n  public async establishConnection(): Promise<HubConnection> {\n    return new HubConnectionBuilder()\n      .withAutomaticReconnect({\n        nextRetryDelayInMilliseconds: retryContext => (retryContext.previousRetryCount > 5 ? null : 2000),\n      })\n      .withUrl(`${this.baseUrl}/hub/emergency`, {\n        accessTokenFactory: async () => (await this.tokenManager.getAccessToken(\"WS accessTokenFactory\")) ?? \"\",\n      })\n      .configureLogging(new WSLogger(this.logger))\n      .build();\n  }\n}\n","import { HubConnection } from \"@microsoft/signalr\";\nimport { Logger } from \"ts-log\";\n\nimport { HeaderProvider } from \"../../../Func\";\nimport ApiEndpoint from \"../ApiEndpoint\";\nimport TokenManager from \"../auth/TokenManager\";\nimport WebsocketManager from \".//WebsocketManager\";\n\n/**\n * Endpoints for interacting with emergencies.\n * */\nexport default class WebsocketEndpoint extends ApiEndpoint {\n  constructor(baseUrl: string | undefined, tokenManager: TokenManager, log?: Logger, headerProvider?: HeaderProvider) {\n    super(baseUrl, tokenManager, log, headerProvider);\n  }\n\n  private websocketManager = new WebsocketManager(this.baseUrl, this.tokenManager, this.log);\n\n  protected override endpoint(): string {\n    return \"websocket\";\n  }\n\n  /**\n   * Gets realtime updates.\n   *\n   * */\n  public async initialize(): Promise<HubConnection> {\n    if (this.websocketManager === undefined) {\n      throw new Error(\"WebsocketManager is undefined\");\n    }\n    return await this.websocketManager.establishConnection();\n  }\n}\n","import { Logger } from \"ts-log\";\n\nimport { AsyncAction } from \"../Func\";\nimport TokenGrant from \"../models/TokenGrant\";\nimport ApiClient from \"./ApiClient\";\nimport ApiConfig from \"./ApiConfig\";\nimport AuthEndpoint from \"./endpoints/auth/AuthEndpoint\";\nimport TokenManager from \"./endpoints/auth/TokenManager\";\nimport ChatMessageEndpoint from \"./endpoints/chatMessage/ChatMessageEndpoint\";\nimport ClientEndpoint from \"./endpoints/client/ClientEndpoint\";\nimport CodeEndpoint from \"./endpoints/code/CodeEndpoint\";\nimport EmergencyEndpoint from \"./endpoints/emergency/EmergencyEndpoint\";\nimport OrgSettingsEndpoint from \"./endpoints/orgSettings/OrgSettingsEndpoint\";\nimport StaffEndpoint from \"./endpoints/staff/StaffEndpoint\";\nimport WebsocketEndpoint from \"./endpoints/websocket/WebsocketEndpoint\";\n\n/**\n * An API client for basic client interactions with the Medrunner API.\n * */\nexport default class MedrunnerApiClient<\n  TEmergency extends EmergencyEndpoint = EmergencyEndpoint,\n  TClient extends ClientEndpoint = ClientEndpoint,\n  TStaff extends StaffEndpoint = StaffEndpoint,\n  TOrgSettings extends OrgSettingsEndpoint = OrgSettingsEndpoint,\n  TChatMessage extends ChatMessageEndpoint = ChatMessageEndpoint,\n  TCode extends CodeEndpoint = CodeEndpoint,\n  TAuth extends AuthEndpoint = AuthEndpoint,\n  TWebsocket extends WebsocketEndpoint = WebsocketEndpoint,\n> implements ApiClient<TEmergency, TClient, TStaff, TOrgSettings, TChatMessage, TCode, TAuth, TWebsocket>\n{\n  protected constructor(\n    public readonly emergency: TEmergency,\n    public readonly client: TClient,\n    public readonly staff: TStaff,\n    public readonly orgSettings: TOrgSettings,\n    public readonly chatMessage: TChatMessage,\n    public readonly code: TCode,\n    public readonly auth: TAuth,\n    public readonly websocket: TWebsocket,\n  ) {}\n\n  /**\n   * Constructs a new API client.\n   *\n   * @param config - The API configuration\n   * @param refreshCallback - a callback function called whenever a refresh token exchange is performed\n   * @param log - A logger which logs request details\n   * */\n  public static buildClient(\n    config: ApiConfig,\n    refreshCallback?: AsyncAction<TokenGrant>,\n    log?: Logger,\n  ): MedrunnerApiClient {\n    const tokenManager = new TokenManager(config, refreshCallback, log);\n\n    return new MedrunnerApiClient(\n      new EmergencyEndpoint(config.baseUrl, tokenManager, log),\n      new ClientEndpoint(config.baseUrl, tokenManager, log),\n      new StaffEndpoint(config.baseUrl, tokenManager, log),\n      new OrgSettingsEndpoint(config.baseUrl, tokenManager, log),\n      new ChatMessageEndpoint(config.baseUrl, tokenManager, log),\n      new CodeEndpoint(config.baseUrl, tokenManager, log),\n      new AuthEndpoint(config.baseUrl, tokenManager, log),\n      new WebsocketEndpoint(config.baseUrl, tokenManager, log),\n    );\n  }\n}\n","/**\n * A supported location from which an emergency may be submitted.\n * */\nexport default interface LocationDetail {\n  /**\n   * The name of this location\n   * */\n  name: string;\n\n  /**\n   * The type of this location\n   * */\n  type: LocationType;\n\n  /**\n   * Additional locations which are within this location (e.g. moons of a planet, or planets of a system)\n   * */\n  children: LocationDetail[];\n}\n\n/**\n * The type of location.\n * */\nexport enum LocationType {\n  /**\n   * The location type is not known\n   * */\n  UNKNOWN,\n  /**\n   * A system, e.g. Stanton\n   * */\n  SYSTEM,\n  /**\n   * A planet, e.g. Crusader\n   * */\n  PLANET,\n  /**\n   * A moon, e.g. Daymar\n   * */\n  MOON,\n}\n","export enum CancellationReason {\n  NONE,\n  OTHER,\n  SUCCUMBED_TO_WOUNDS,\n  SERVER_ERROR,\n  RESPAWNED,\n  RESCUED,\n}\n","export enum Class {\n  NONE,\n  MEDIC,\n  SECURITY,\n  PILOT,\n  LEAD,\n  DISPATCH,\n  DISPATCH_LEAD,\n  DISPATCH_TRAINEE,\n  DISPATCH_OBSERVER,\n  QRF,\n  LOGISTICS,\n}\n","import { CancellationReason } from \"./CancellationReason\";\nimport { MissionStatus } from \"./MissionStatus\";\nimport { ResponseRating } from \"./ResponseRating\";\nimport Team from \"./Team\";\nimport { ThreatLevel } from \"./ThreatLevel\";\nimport WritableDbItem from \"./WritableDbItem\";\n\nexport default interface Emergency extends WritableDbItem {\n  system: string;\n  subsystem: string;\n  tertiaryLocation?: string;\n  threatLevel: ThreatLevel;\n  remarks?: string;\n  clientRsiHandle: string;\n  clientDiscordId?: string;\n  clientId?: string;\n  subscriptionTier: string;\n  status: MissionStatus;\n  alertMessage?: MessageCache;\n  clientMessage?: MessageCache;\n  coordinationThread?: MessageCache;\n  afterActionReportMessage?: MessageCache;\n  interactionMessageId?: string;\n  respondingTeam: Team;\n  respondingTeams: RespondingTeam[];\n  creationTimestamp: number;\n  acceptedTimestamp?: number;\n  completionTimestamp?: number;\n  rating: ResponseRating;\n  ratingRemarks?: string;\n  test: boolean;\n  cancellationReason: CancellationReason;\n  refusalReason?: string;\n  origin: Origin;\n  clientData?: ClientData;\n  isComplete: boolean;\n  missionName?: string;\n  afterActionReport?: AfterActionReport;\n  submissionSource: SubmissionSource;\n}\n\nexport interface MessageCache {\n  id: string;\n  channelId: string;\n}\n\nexport interface ClientData {\n  rsiHandle: string;\n  rsiProfileLink: string;\n  gotClientData: boolean;\n  redactedOrgOnProfile: boolean;\n  reported: boolean;\n}\n\nexport interface AfterActionReport {\n  remarks?: string;\n  submitterStaffId: string;\n  servicesProvided: MissionServices;\n  suspectedTrap: boolean;\n  hasBeenEdited: boolean;\n  submittedOn: number;\n  editHistory: AfterActionReportEdit[];\n}\n\nexport interface AfterActionReportEdit {\n  editorStaffId: string;\n  editTime: number;\n}\n\nexport enum MissionServices {\n  NONE = 0,\n  PVE = 1 << 0,\n  PVP = 1 << 1,\n  REVIVED_HEALED = 1 << 2,\n  HEALED_IN_SHIP = 1 << 3,\n  EXTRACT_SAFE_ZONE = 1 << 4,\n}\n\nexport enum Origin {\n  UNKNOWN,\n  REPORT,\n  BEACON,\n  EVALUATION,\n}\n\nexport enum SubmissionSource {\n  UNKNOWN,\n  API,\n  BOT,\n}\n\nexport interface RespondingTeam {\n  id: string;\n  teamName: string;\n}\n","export enum MissionStatus {\n  CREATED,\n  RECEIVED,\n  IN_PROGRESS,\n  SUCCESS,\n  FAILED,\n  NO_CONTACT,\n  CANCELED,\n  REFUSED,\n  ABORTED,\n  SERVER_ERROR,\n}\n","import EmergencyStats from \"./EmergencyStats\";\nimport WritableDbItem from \"./WritableDbItem\";\n\nexport default interface Person extends WritableDbItem {\n  discordId: string;\n  rsiHandle?: string;\n  roles: UserRoles;\n  personType: PersonType;\n  active: boolean;\n  deactivationReason: AccountDeactivationReason;\n  clientStats: ClientStats;\n  activeEmergency?: string;\n  /**\n   * @deprecated Use {@link clientPortalPreferencesBlob} instead\n   */\n  clientPortalPreferences: Record<string, unknown>;\n  clientPortalPreferencesBlob?: string;\n  redeemedCodes: RedeemedCode[];\n}\n\nexport enum UserRoles {\n  CLIENT = 1 << 0,\n  STAFF = 1 << 1,\n  //@ts-expect-error - valid range\n  DEVELOPER = 1 << 51,\n  //@ts-expect-error - valid range\n  BOT = 1 << 52,\n}\n\nexport enum PersonType {\n  CLIENT,\n  STAFF,\n  BOT,\n}\n\nexport enum AccountDeactivationReason {\n  NONE,\n  CLIENT_DRIVEN_DELETION,\n  TERMINATED,\n  BLOCKED,\n}\n\nexport interface ClientStats {\n  missions: EmergencyStats;\n}\n\nexport interface BlockedStatus {\n  blocked: boolean;\n}\n\nexport interface RedeemedCode {\n  code: string;\n  type: CodeType;\n}\n\nexport enum CodeType {\n  Unknown,\n  CitizenCon2954,\n}\n","export enum Level {\n  None,\n  Tier1Section1 = 101,\n  Tier1Section2,\n  Tier1Section3,\n  Tier2Section1 = 201,\n  Tier2Section2,\n  Tier2Section3,\n  Tier3Section1 = 301,\n  Tier3Section2,\n  Tier3Section3,\n  Tier4Section1 = 401,\n  Tier4Section2,\n  Tier4Section3,\n  Tier5Section1 = 501,\n  Tier5Section2,\n  Tier5Section3,\n  Tier6Section1 = 601,\n  Tier6Section2,\n  Tier6Section3,\n  Tier7Section1 = 701,\n  Tier7Section2,\n  Tier7Section3,\n  Tier8Section1 = 801,\n  Tier8Section2,\n  Tier8Section3,\n  Tier9Section1 = 901,\n  Tier9Section2,\n  Tier9Section3,\n  Tier10Section1 = 1001,\n  Tier10Section2,\n  Tier10Section3,\n}\n","export enum ResponseRating {\n  NONE,\n  GOOD,\n  BAD,\n}\n","export enum ThreatLevel {\n  UNKNOWN,\n  LOW,\n  MEDIUM,\n  HIGH,\n}\n","export default interface PublicOrgSettings {\n  status: ServiceStatus;\n  emergenciesEnabled: boolean;\n  messageOfTheDay?: MessageOfTheDay;\n}\n\nexport interface MessageOfTheDay {\n  message: string;\n  dateRange?: DateRange;\n}\n\nexport interface DateRange {\n  startDate: string;\n  endDate: string;\n}\n\nexport enum ServiceStatus {\n  UNKNOWN = 0,\n  HEALTHY = 1,\n  SLIGHTLY_DEGRADED = 2,\n  HEAVILY_DEGRADED = 3,\n  OFFLINE = 4,\n}\n"],"mappings":"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","names":["LocationType","CancellationReason","Class","MissionServices","Origin","SubmissionSource","MissionStatus","UserRoles","PersonType","AccountDeactivationReason","CodeType","Level","ResponseRating","ThreatLevel","ServiceStatus"]}